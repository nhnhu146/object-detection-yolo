#!/usr/bin/env python3
"""
Script ki·ªÉm tra class names configuration
"""

import sys
import os

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def check_class_names():
    """Ki·ªÉm tra class names trong config"""
    try:
        print("=" * 60)
        print("üîç KI·ªÇM TRA CLASS NAMES CONFIGURATION")
        print("=" * 60)
        
        # Import config
        from src.config import Config
        
        print("‚úÖ Import config th√†nh c√¥ng")
        
        config = Config()
        available_models = config.AVAILABLE_MODELS
        
        print(f"üìä T·ªïng s·ªë models: {len(available_models)}")
        
        # Standard COCO classes for YOLOv8
        COCO_CLASSES = [
            "person", "bicycle", "car", "motorcycle", "airplane", "bus", "train", "truck", 
            "boat", "traffic light", "fire hydrant", "stop sign", "parking meter", "bench",
            "bird", "cat", "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe",
            "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard",
            "sports ball", "kite", "baseball bat", "baseball glove", "skateboard", "surfboard",
            "tennis racket", "bottle", "wine glass", "cup", "fork", "knife", "spoon", "bowl",
            "banana", "apple", "sandwich", "orange", "broccoli", "carrot", "hot dog", "pizza",
            "donut", "cake", "chair", "couch", "potted plant", "bed", "dining table", "toilet",
            "tv", "laptop", "mouse", "remote", "keyboard", "cell phone", "microwave", "oven",
            "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors", "teddy bear",
            "hair drier", "toothbrush"
        ]
        
        print(f"üìã COCO standard classes: {len(COCO_CLASSES)}")
        
        for model_id, model_info in available_models.items():
            print(f"\nüîß MODEL: {model_id}")
            print("=" * 40)
            print(f"   üìù Name: {model_info['name']}")
            print(f"   üìä Expected classes: {model_info['classes']}")
            
            if 'class_names' in model_info:
                config_classes = model_info['class_names']
                print(f"   üìã Config class names: {len(config_classes)}")
                
                # Check if it matches expected count
                if len(config_classes) == model_info['classes']:
                    print("   ‚úÖ S·ªë l∆∞·ª£ng classes kh·ªõp v·ªõi khai b√°o")
                else:
                    print(f"   ‚ùå Kh√¥ng kh·ªõp! Expected: {model_info['classes']}, Got: {len(config_classes)}")
                    
                # For YOLOv8s, compare with COCO classes
                if model_id == "yolov8s":
                    if len(config_classes) == len(COCO_CLASSES):
                        print("   ‚úÖ Kh·ªõp v·ªõi s·ªë l∆∞·ª£ng COCO classes")
                        
                        # Check exact matches
                        mismatches = []
                        for i in range(min(len(config_classes), len(COCO_CLASSES))):
                            if config_classes[i] != COCO_CLASSES[i]:
                                mismatches.append({
                                    'index': i,
                                    'config': config_classes[i],
                                    'coco': COCO_CLASSES[i]
                                })
                                
                        if mismatches:
                            print(f"   ‚ùå Ph√°t hi·ªán {len(mismatches)} class names sai:")
                            for mismatch in mismatches[:5]:  # Show first 5
                                print(f"      [{mismatch['index']}] Config: '{mismatch['config']}' != COCO: '{mismatch['coco']}'")
                            if len(mismatches) > 5:
                                print(f"      ... v√† {len(mismatches) - 5} l·ªói kh√°c")
                        else:
                            print("   ‚úÖ T·∫•t c·∫£ class names ƒë·ªÅu ch√≠nh x√°c")
                    else:
                        print(f"   ‚ùå S·ªë l∆∞·ª£ng kh√¥ng kh·ªõp COCO: Config={len(config_classes)}, COCO={len(COCO_CLASSES)}")
                        
                # Show first few classes
                print("   üìã Class names (5 ƒë·∫ßu ti√™n):")
                for i, class_name in enumerate(config_classes[:5]):
                    print(f"      {i}: '{class_name}'")
                    
            else:
                print("   ‚ö†Ô∏è  Kh√¥ng c√≥ 'class_names' trong config")
                
            # Check Vietnamese names
            if 'class_names_vi' in model_info:
                vi_classes = model_info['class_names_vi']
                print(f"   üáªüá≥ Vietnamese names: {len(vi_classes)}")
                
                if 'class_names' in model_info:
                    if len(vi_classes) == len(model_info['class_names']):
                        print("   ‚úÖ S·ªë l∆∞·ª£ng Vietnamese names kh·ªõp")
                    else:
                        print(f"   ‚ùå Vietnamese names kh√¥ng kh·ªõp: EN={len(model_info['class_names'])}, VI={len(vi_classes)}")
                        
                # Show Vietnamese names
                print("   üáªüá≥ Vietnamese names:")
                for i, class_name in enumerate(vi_classes):
                    print(f"      {i}: '{class_name}'")
                    
        # Additional checks
        print(f"\nüîç PH√ÇN T√çCH V·∫§N ƒê·ªÄ")
        print("=" * 40)
        
        yolo_config = available_models.get("yolov8s", {})
        if 'class_names' in yolo_config:
            yolo_classes = yolo_config['class_names']
            print(f"‚úÖ YOLOv8s config c√≥ {len(yolo_classes)} classes")
            
            # Check common detection issues
            common_issues = []
            
            # Check for missing common classes
            common_objects = ["person", "car", "dog", "cat", "bird"]
            for obj in common_objects:
                if obj not in yolo_classes:
                    common_issues.append(f"Thi·∫øu class '{obj}'")
                    
            # Check for duplicate classes
            if len(yolo_classes) != len(set(yolo_classes)):
                duplicates = []
                seen = set()
                for cls in yolo_classes:
                    if cls in seen:
                        duplicates.append(cls)
                    seen.add(cls)
                common_issues.append(f"Classes tr√πng l·∫∑p: {duplicates}")
                
            # Check for empty or None classes
            empty_classes = [i for i, cls in enumerate(yolo_classes) if not cls or cls.strip() == ""]
            if empty_classes:
                common_issues.append(f"Classes r·ªóng t·∫°i index: {empty_classes}")
                
            if common_issues:
                print("‚ùå C√°c v·∫•n ƒë·ªÅ ph√°t hi·ªán:")
                for issue in common_issues:
                    print(f"   - {issue}")
            else:
                print("‚úÖ Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ r√µ r√†ng trong config")
                
        print(f"\nüí° KHUY·∫æN NGH·ªä")
        print("=" * 40)
        print("1. Ki·ªÉm tra model th·ª±c t·∫ø ƒë∆∞·ª£c load c√≥ kh·ªõp v·ªõi config kh√¥ng")
        print("2. Test prediction v·ªõi 1 ·∫£nh c·ª• th·ªÉ ƒë·ªÉ xem class n√†o ƒë∆∞·ª£c detect")
        print("3. So s√°nh k·∫øt qu·∫£ v·ªõi expected classes")
        print("4. Ki·ªÉm tra version c·ªßa ultralytics YOLO")
        
        print("\n" + "=" * 60)
        print("‚úÖ HO√ÄN TH√ÄNH KI·ªÇM TRA CONFIG")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_class_names()
