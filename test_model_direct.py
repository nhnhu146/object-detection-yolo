#!/usr/bin/env python3
"""
Script test ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra YOLO model loading v√† class names
Ch·ªâ c·∫ßn ultralytics library
"""

def test_model_direct():
    """Test tr·ª±c ti·∫øp v·ªõi ultralytics YOLO"""
    try:
        print("=" * 60)
        print("üîç TEST TR·ª∞C TI·∫æP YOLO MODEL")
        print("=" * 60)
        
        # Try to import ultralytics
        try:
            from ultralytics import YOLO
            print("‚úÖ ultralytics imported th√†nh c√¥ng")
        except ImportError:
            print("‚ùå Ch∆∞a c√†i ultralytics. C·∫ßn ch·∫°y: pip install ultralytics")
            return
            
        # Test YOLOv8s model
        print("\nüìä Loading YOLOv8s model...")
        try:
            model = YOLO('yolov8s.pt')
            print("‚úÖ YOLOv8s model loaded th√†nh c√¥ng")
            
            # Get class names from actual model
            model_classes = list(model.names.values())
            print(f"üìã Model c√≥ {len(model_classes)} classes")
            
            # Show first 10 classes
            print("üìã Classes t·ª´ model (10 ƒë·∫ßu ti√™n):")
            for i, class_name in enumerate(model_classes[:10]):
                print(f"   {i}: '{class_name}'")
                
            print(f"   ... v√† {len(model_classes) - 10} classes kh√°c")
            
            # Check specific classes that might cause issues
            problem_classes = []
            common_objects = ["person", "car", "dog", "cat", "bird", "horse", "cow", "elephant"]
            
            print("\nüîç Ki·ªÉm tra c√°c classes ph·ªï bi·∫øn:")
            for obj in common_objects:
                if obj in model_classes:
                    index = model_classes.index(obj)
                    print(f"   ‚úÖ '{obj}' -> index {index}")
                else:
                    print(f"   ‚ùå '{obj}' -> KH√îNG T√åM TH·∫§Y")
                    problem_classes.append(obj)
                    
            if problem_classes:
                print(f"\n‚ùå Kh√¥ng t√¨m th·∫•y {len(problem_classes)} classes: {problem_classes}")
            else:
                print("\n‚úÖ T·∫•t c·∫£ classes ph·ªï bi·∫øn ƒë·ªÅu c√≥ trong model")
                
            # Check class name types and format
            print("\nüîç Ki·ªÉm tra format class names:")
            for i, class_name in enumerate(model_classes[:5]):
                print(f"   {i}: '{class_name}' (type: {type(class_name)}, len: {len(class_name)})")
                
            # Compare v·ªõi config
            print("\nüìä So s√°nh v·ªõi config...")
            try:
                import sys
                import os
                sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))
                from src.config import Config
                
                config = Config()
                config_classes = config.AVAILABLE_MODELS["yolov8s"]["class_names"]
                
                print(f"üìä Config c√≥ {len(config_classes)} classes")
                print(f"üìä Model c√≥ {len(model_classes)} classes")
                
                if len(config_classes) == len(model_classes):
                    print("‚úÖ S·ªë l∆∞·ª£ng classes kh·ªõp")
                    
                    # Check exact matches
                    mismatches = []
                    for i in range(len(model_classes)):
                        if model_classes[i] != config_classes[i]:
                            mismatches.append({
                                'index': i,
                                'model': model_classes[i],
                                'config': config_classes[i]
                            })
                            
                    if mismatches:
                        print(f"‚ùå Ph√°t hi·ªán {len(mismatches)} class names kh√¥ng kh·ªõp:")
                        for mismatch in mismatches[:10]:
                            print(f"   [{mismatch['index']}] Model: '{mismatch['model']}' != Config: '{mismatch['config']}'")
                        
                        print("\nüí° NGUY√äN NH√ÇN C√ì TH·ªÇ:")
                        print("   1. Config class names kh√¥ng ƒë√∫ng v·ªõi YOLOv8s")
                        print("   2. Version YOLO kh√°c nhau c√≥ class names kh√°c nhau") 
                        print("   3. Model file b·ªã corrupted")
                        
                    else:
                        print("‚úÖ T·∫•t c·∫£ class names ƒë·ªÅu kh·ªõp gi·ªØa model v√† config")
                        
                else:
                    print(f"‚ùå S·ªë l∆∞·ª£ng classes kh√¥ng kh·ªõp!")
                    print(f"   Config: {len(config_classes)} classes")
                    print(f"   Model:  {len(model_classes)} classes")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ so s√°nh v·ªõi config: {e}")
                
        except Exception as e:
            print(f"‚ùå L·ªói loading model: {e}")
            
        print("\n" + "=" * 60)
        print("‚úÖ HO√ÄN TH√ÄNH TEST MODEL")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå L·ªói t·ªïng qu√°t: {e}")
        import traceback
        traceback.print_exc()

def test_with_image():
    """Test prediction v·ªõi m·ªôt ·∫£nh sample n·∫øu c√≥"""
    try:
        print("\n" + "=" * 60)
        print("üîç TEST PREDICTION (N·∫æU C√ì ·∫¢NH)")
        print("=" * 60)
        
        from ultralytics import YOLO
        import os
        
        # Look for sample images
        sample_dirs = ["uploads", "test_images", "samples", "."]
        sample_files = []
        
        for directory in sample_dirs:
            if os.path.exists(directory):
                for file in os.listdir(directory):
                    if file.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
                        sample_files.append(os.path.join(directory, file))
                        
        if sample_files:
            print(f"üìÅ T√¨m th·∫•y {len(sample_files)} ·∫£nh sample")
            test_image = sample_files[0]
            print(f"üñºÔ∏è  Test v·ªõi ·∫£nh: {test_image}")
            
            model = YOLO('yolov8s.pt')
            results = model(test_image, verbose=False)
            
            if results and len(results) > 0:
                result = results[0]
                
                if result.boxes is not None and len(result.boxes) > 0:
                    print(f"‚úÖ Ph√°t hi·ªán {len(result.boxes)} objects:")
                    
                    for i, box in enumerate(result.boxes):
                        cls = int(box.cls[0])
                        conf = float(box.conf[0])
                        class_name = model.names[cls]
                        
                        print(f"   {i+1}. Class: '{class_name}' (ID: {cls}, Confidence: {conf:.2f})")
                        
                else:
                    print("‚ö†Ô∏è  Kh√¥ng ph√°t hi·ªán object n√†o trong ·∫£nh")
            else:
                print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ prediction")
                
        else:
            print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ·∫£nh sample ƒë·ªÉ test")
            print("üí° C√≥ th·ªÉ upload ·∫£nh v√†o th∆∞ m·ª•c uploads/ ƒë·ªÉ test")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ test prediction: {e}")

if __name__ == "__main__":
    test_model_direct()
    test_with_image()
